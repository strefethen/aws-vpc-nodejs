#!/usr/bin/env node
import AWS = require('aws-sdk');

//const request = new AWS.EC2({apiVersion: '2016-11-15'}).describeInstances();

var ec2 = new AWS.EC2({apiVersion: '2016-11-15', region: "us-east-1"});

ec2.describeVpcs((err: AWS.AWSError, data: AWS.EC2.DescribeVpcsResult) => {
  console.log(data);
})

function createTag(resource: string, tags: Array<AWS.EC2.Tag>) {
  const resourceTags: AWS.EC2.CreateTagsRequest = {
    Resources: [
      resource
    ], 
    Tags: tags
  };
  ec2.createTags(resourceTags, (err, res) => {
    if (err) {
      console.log(err);
    } else {
      console.log(`Tags added: ${tags}`);
    }
  });
}

async function createInternetGateway(vpc: string): Promise<AWS.EC2.CreateInternetGatewayResult> {
  var ig = await ec2.createInternetGateway({}).promise();
  if (ig) {
    createTag(ig.InternetGateway.InternetGatewayId, [
      { 
        Key: "Name", 
        Value: "My Gateway Node"
      }]
    );
    var attach = ec2.attachInternetGateway({ InternetGatewayId: ig.InternetGateway.InternetGatewayId, VpcId: vpc}).promise();
    if (attach)
      console.log(`Attaching gateway to vpc (${vpc} succeeded.`);
    else    
      console.log('Attaching gateway to vpc failed');
  }
  return ig;
}

function createACL(tag: string, params: AWS.EC2.CreateNetworkAclRequest) {
  ec2.createNetworkAcl(params).promise().then((res: AWS.EC2.CreateNetworkAclResult) => {
    createTag(res.NetworkAcl.NetworkAclId, [ { Key: "Name", Value: tag}]);
  }).catch((err: AWS.AWSError) => {
    console.log('Failed to create Network ACL');
  });
}

async function createRouteTable(params: AWS.EC2.CreateRouteTableRequest): Promise<AWS.EC2.CreateRouteTableResult> {
  var rt = await ec2.createRouteTable(params).promise();
  if (rt) {
    console.log(rt);
  return rt;
}

async function createRoute(params: AWS.EC2.CreateRouteRequest): Promise<AWS.EC2.CreateRouteResult> {
  var route = ec2.createRoute(params).promise();
  return route;
}

async function createSubnet(params: AWS.EC2.CreateSubnetRequest): Promise<AWS.EC2.CreateSubnetResult> {
  var subnet = ec2.createSubnet(params).promise();
  return subnet;
}

const createVpc = ec2.createVpc({
  CidrBlock: "10.2.0.0/24",
  AmazonProvidedIpv6CidrBlock: true,
  DryRun: false,
  InstanceTenancy: "default"
}).promise();

createVpc.then(
  (result: AWS.EC2.CreateVpcResult) => {
    console.log(result);   
    createTag(result.Vpc.VpcId, [{ Key: "Name", Value: "My Cloud Node"}]);
    var ig: AWS.EC2.CreateInternetGatewayResult = await createInternetGateway(result.Vpc.VpcId);
    createACL("My NetworkAcl Node", { VpcId: result.Vpc.VpcId});
    var rt: AWS.EC2.CreateRouteTableResult = await createRouteTable({ VpcId: result.Vpc.VpcId });
    if (rt) {
      createRoute({ 
        DestinationCidrBlock: "10.0.0.0/16",
        RouteTableId: rt.RouteTable.RouteTableId
      });
      createRoute({
        DestinationCidrBlock: "0.0.0.0/0",
        RouteTableId: rt.RouteTable.RouteTableId,
        GatewayId: ig.InternetGateway.InternetGatewayId
      });
    }
    var publicSubnet = await createSubnet({
      CidrBlock: "10.0.0.0/16",
      VpcId: result.Vpc.VpcId
    });
    createTag(publicSubnet.Subnet.SubnetId, [ { Key: "Name", Value: "Public Subnet"}])
    var privateSubnet = await createSubnet({
      CidrBlock: "10.0.1.0/16",
      VpcId: result.Vpc.VpcId,
    });
    createTag(privateSubnet.Subnet.SubnetId, [ { Key: "Name", Value: "Private Subnet"}])
  }).catch((error) => {
    console.log(error);
  });